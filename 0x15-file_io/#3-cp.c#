#include "main.h"

/**
 * main - Copies content of file to another
 *
 * @argc: int
 *
 * @argv: double pointer
 *
 * Return: Copy of file
 */
#define BUFFER_SIZE 1024

int main(int argc, char *argv[])
{
	int fd_from, fd_to, bytes_read, bytes_written;
	char buffer[BUFFER_SIZE];
	struct stat st;

	if (argc != 3)
	{
		dprintf(STDERR_FILENO, "Usage:%s file_from file_to\n", argv[0]);
		exit(97);
	}en the source file for reading
    if ((fd_from = open(argv[1], O_RDONLY)) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't read from file %s\n", argv[1]);
        exit(98);
    }

    // Check if the destination file already exists
    if (stat(argv[2], &st) == 0) {
        if ((st.st_mode & S_IFMT) == S_IFREG) {
            // Destination file is a regular file, truncate it
            if (truncate(argv[2], 0) == -1) {
                dprintf(STDERR_FILENO, "Error: Can't truncate file %s\n", argv[2]);
                exit(99);
            }
        } else {
            // Destination file is not a regular file, exit with an error
            dprintf(STDERR_FILENO, "Error: Can't write to %s\n", argv[2]);
            exit(99);
        }
    }

    // Open the destination file for writing
    if ((fd_to = open(argv[2], O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH)) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't write to %s\n", argv[2]);
        exit(99);
    }

    // Copy the content of the source file to the destination file
    while ((bytes_read = read(fd_from, buffer, BUFFER_SIZE)) > 0) {
        if ((bytes_written = write(fd_to, buffer, bytes_read)) != bytes_read) {
            dprintf(STDERR_FILENO, "Error: Can't write to %s\n", argv[2]);
            exit(99);
        }
    }

    // Check for read error
    if (bytes_read == -1) {
        dprintf(STDERR_FILENO, "Error: Can't read from file %s\n", argv[1]);
        exit(98);
    }

    // Close the files
    if (close(fd_from) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't close fd %d\n", fd_from);
        exit(100);
    }

    if (close(fd_to) == -1) {
        dprintf(STDERR_FILENO, "Error: Can't close fd %d\n", fd_to);
        exit(100);
    }

    return 0;
}
